%YAML 1.2
---
name: Specman
file_extensions:
  - e
scope: source.specman

variables:
  types: (list of \w*|locker|address|body|code|vec|chars|integer|real|bool|int|long|uint|byte|bits|bit|time|string|byte_array|external_pointer)

contexts:
  main:
    - match: '"'
      push: string

    - match: //|--
      push: comment

    - scope: keyword.statement.specman
      match: \b(var|instance|on|compute|start|event|expect|check|that|routine|specman|with|like|all|radix|hex|dec|bin|ignore|illegal|traceable|untraceable|cover|using|count_only|trace_only|at_least|transition|item|ranges|cross|text|call|task|within)\b
    
    - scope: variable.function.specman meta.function-call
      match: \b(initialize|non_terminal|testgroup|delayed|exit|finish|out|append|print|outf|appendf|post_generate|pre_generate|setup_test|finalize_test|extract_test|init|run|copy|as_a|set_config|dut_error|add|clear|lock|quit|lock|unlock|release|swap|quit|to_string|value|stop_run|crc_8|crc_32|crc_32_flip|get_config|add0|all_indices|and_all|apply|average|count|delete|exists|first_index|get_indices|has|insert|is_a_permutation|is_empty|key|key_exists|key_index|last|last_index|max|max_index|max_value|min|min_index|min_value|or_all|pop|pop0|push|push0|product|resize|reverse|sort|split|sum|top|top0|unique|clear|is_all_iterations|get_enclosing_unit|hdl_path|exec|deep_compare|deep_compare_physical|pack|unpack|warning|error|fatal)\b
    
    - scope: keyword.control.specman
      match: \b(until|repeat|while|for|from|to|step|each|do|break|continue|before|next|sequence|always|-kind|network|index|it|me|in|new|return|result|select)\b
    
    - scope: keyword.packing.specman
      match: \b(packing|low|high)\b
    
    - scope: constant.language.specman
      match: \b(TRUE|FALSE)\b

    - match: ([0-9]+):([0-9]+)
      captures:
        1: constant.numeric.specman
        2: constant.numeric.specman

    - match: \b([0-9]+)\b
      scope: constant.numeric.specman

    - scope: constant.numeric.binary.specman
      match: ((\d+)?'[bB]\s*[0-1_xXzZ?]+|0[bB]\s*[0-1_xXzZ?]+)

    - scope: constant.numeric.integer.specman
      match: (\d+)?'[dD]\s*[0-9_xXzZ?]+

    - scope: constant.numeric.hex.specman
      match: ((\d+)?'[hH]\s*[0-9a-fA-F_xXzZ?]+|0[oO]\s*[0-9a-fA-F_xXzZ?]+)

    - scope: constant.numeric.octal.specman
      match: ((\d+)?'[oO]\s*[0-7_xXzZ?]+|0[xX]\s*[0-9a-fA-F_xXzZ?]+)

    - match: ^\s*(#\s*(?:ifdef|ifndef|else))\b
      scope: keyword.control.import.specman meta.preprocessor.specman

    - scope: keyword.conditional.specman
      match: \b(choose|matches|if|then|else|when|try)\b
    
    - scope: keyword.conditional.specman
      match: \b(case|casex|casez|default)\b
    
    - scope: keyword.operator.word.specman
      match: \b(and|or|not|xor)\b
  
    - scope: keyword.operator.assignment.specman
      match: (=|+=|-=|*=)

    - scope: keyword.operator.logical.specman
      match: (==|!=|>|<|===|!===|>=|<=)

    - scope: keyword.operator.arithmetic.specman
      match: (-|\+|*|/)

    - scope: keyword.operator.bitwise.specman
      match: (&|\|~|!)

    - scope: keyword.temporal.specman
      match: \b(cycle|sample|events|forever|wait|change|negedge|rise|fall|delay|sync|sim|true|detach|eventually|emit)\b
    
    - scope: constant.language.specman
      match: \b(MAX_INT|MIN_INT|NULL|UNDEF)\b
    
    - scope: keyword.define.specman
      match: \b(define|as|computed|type|extend|verilog|vhdl|variable|global|sys)\b
    
    - scope: entity.name.class.specman
      match: \b(struct|unit)\b
    
    - scope: keyword.control.import.specman
      match: \b(import)\b
    
    - scope: keyword.constraint.specman
      match: \b(gen|keep|keeping|soft|before)\b
    
    - scope: keyword.special.specman
      match: \b(untyped|symtab|ECHO|DOECHO)\b
    
    - scope: keyword.file.specman
      match: \b(files|load|module|ntv|source_ref|script|read|write)\b
    
    - scope: keyword.fsm.specman
      match: \b(initial|idle|others|posedge|clock|cycles)\b

    - match: ([\w<>']*)\s*\((.*)?\)\s*(:\s*(.*))?\s*(is (only|first|also)?)
      captures:
        1: meta.function.specman entity.name.function.specman
        2: meta.function.parameters.specman variable.parameter.specman
        4: meta.function.return-type.specman storage.type.specman
        5: keyword.other.function.specman

    - include: type

  string:
    - meta_scope: string.quoted.double.specman
    - match: '"'
      pop: true

  comment:
    - meta_scope: comment.specman
    - match: \n
      pop: true

  type:
    - scope: storage.type.specman
      match: \b{{types}}\b